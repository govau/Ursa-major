version: 2.1
jobs:
  build-and-test-server:
    docker:
      - image: circleci/node:12.16.2
    working_directory: ~/app-server
    steps:
      - run:
          name: Set environment variables for build
          command: |
            echo 'export NODE_ENV=$CIRCLE_BRANCH' >> $BASH_ENV
            source $BASH_ENV
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd api/
            npm i
      - run:
          name: Move assets into deploy directory
          command: |
            mkdir api-deploy
            cd api/
            mv src/ .deploy/ package.json gc-config.js node_modules/ ../api-deploy
      - persist_to_workspace:
          root: ~/app-server
          paths:
            - api-deploy/

  deploy-server-staging:
    docker:
      - image: govau/cf-cli
    steps:
      - attach_workspace:
          at: ~/app-server
      - run:
          name: Deploy server to cloud.gov.au development
          command: |
            cd ~/app-server
            cd api-deploy/
            mv .deploy/manifest-staging.yml ./
            cf login -a $CF_API_STAGING -o $CF_ORG -s $CF_SPACE -u $CF_USERNAME -p $CF_PASSWORD_STAGING
            cf zero-downtime-push ursa-major-api -f manifest-staging.yml

  deploy-server-prod:
    docker:
      - image: govau/cf-cli
    steps:
      - attach_workspace:
          at: ~/app-server
      - run:
          name: Deploy server to cloud.gov.au development
          command: |
            cd ~/app-server
            cd api-deploy/
            mv .deploy/manifest-prod.yml ./
            cf login -a $CF_API_PROD -o $CF_ORG -s $CF_SPACE -u $CF_USERNAME -p $CF_PASSWORD_PROD
            cf zero-downtime-push analytics-api -f manifest-prod.yml

  build-and-test-front-end:
    docker:
      - image: circleci/node:12.16.2
    working_directory: ~/app-ui
    steps:
      - run:
          name: Set environment variables for build
          command: |
            echo 'export NODE_ENV=$CIRCLE_BRANCH' >> $BASH_ENV
            source $BASH_ENV
      - checkout
      - run:
          name: Install dependencies set envs
          command: |
            cd front-end/
            npm i
            . ./prebuild.sh
            npm run build
      - run:
          name: Make deploy directory
          command: |
            mkdir front-end-deploy
            cd front-end
            mv public/ .deploy/ ../front-end-deploy
      - persist_to_workspace:
          root: ~/app-ui
          paths:
            - front-end-deploy/

  deploy-front-end-prod:
    docker:
      - image: govau/cf-cli
    steps:
      - attach_workspace:
          at: ~/app-ui
      - run:
          name: Deploy to cloud.gov.au development
          command: |
            cd ~/app-ui
            cd front-end-deploy/
            mv .deploy/manifest-prod.yml ./
            cf login -a $CF_API_PROD -o $CF_ORG -s $CF_SPACE -u $CF_USERNAME -p $CF_PASSWORD_PROD
            cf zero-downtime-push analytics -f manifest-prod.yml

  deploy-front-end-staging:
    docker:
      - image: govau/cf-cli
    steps:
      - attach_workspace:
          at: ~/app-ui
      - run:
          name: Deploy to cloud.gov.au development
          command: |
            cd ~/app-ui
            cd front-end-deploy
            mv .deploy/manifest-staging.yml ./
            cf login -a $CF_API_STAGING -o $CF_ORG -s $CF_SPACE -u $CF_USERNAME -p $CF_PASSWORD_STAGING
            cf zero-downtime-push ursa-major-front-end -f manifest-staging.yml

workflows:
  version: 2.1
  build-and-deploy:
    jobs:
      - build-and-test-server
      - deploy-server-staging:
          requires:
            - build-and-test-server
          filters:
            branches:
              only: develop
      - deploy-server-prod:
          requires:
            - build-and-test-server
          filters:
            branches:
              only: master

      - build-and-test-front-end
      - deploy-front-end-staging:
          requires:
            - build-and-test-front-end
          filters:
            branches:
              only: develop
      - deploy-front-end-prod:
          requires:
            - build-and-test-front-end
          filters:
            branches:
              only: master
